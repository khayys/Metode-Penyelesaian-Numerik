import numpy as np 

def gauss_elimination(A, b):
    n = len(b)

    # Augmentasi matriks
    Ab = np.hstack([A, b.reshape(-1, 1)])

    # Forward elimination
    for i in range(n):
        # Memilih elemen pivot
        max_row = i + np.argmax(np.abs(Ab[i:, i]))
        
        # Menukar baris jika diperlukan
        if i != max_row:
            Ab[[i, max_row]] = Ab[[max_row, i]]

        # Eleminasi elemen di bawah pivot
        for j in range(i+1, n):
            factor = Ab[j, i] / Ab[i, i]
            Ab[j, i:] = Ab[j, i:] - factor * Ab[i, i:]

    # Back substitution
    x = np.zeros(n)
    for i in range(n-1, -1, -1):
        x[i] = (Ab[i, -1] - np.dot(Ab[i, i+1:n], x[i+1:n])) / Ab[i, i]

    return x

# Input matriks As
A = np.array([[2, 3, 1], [4, 1, -1], [-2, 1, 1]], dtype=float)
# Input vektor b
b = np.array([11, 3, 3], dtype=float)

# Menjalankan fungsi
solusi = gauss_elimination(A, b)
print("Solusi: ", solusi)
